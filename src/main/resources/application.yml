spring:
  application:
    name: test
  rabbitmq:
    host: localhost
    port: 5672
    username: user
    password: password
    virtual-host: my_host

# 官方给出来的重试次数3次的例子逻辑是, 先手动确认该消息, 然后再用channel或者rabbitTemplate重发该消息, 同时在头部添加失败次数
# https://cloud.spring.io/spring-cloud-static/spring-cloud-stream-binder-rabbit/3.0.0.RELEASE/reference/html/spring-cloud-stream-binder-rabbit.html#_non_partitioned_destinations
# spring.rabbitmq.listener.simple.retry.max-attempts=3 配置的是当前的消费者重试的次数, 不是整个rabbitmq消息失败的重试次数, 有多个服务时, 每个服务都会重试那条消息3次
#spring.rabbitmq.listener.simple.retry.max-attempts: 3

# 开启发送确认(开启此模式，生产者成功发送到交换机后执行相应的回调函数)
#spring.rabbitmq.publisher-confirms: true
# 开启发送失败退回
#spring.rabbitmq.publisher-returns: true
# 开启confirm机制的回调
spring.rabbitmq.publisher-confirms: true

# 开启发送失败退(开启此模式，交换机路由不到队列时执行相应的回调函数)
# 消息发送失败返回到队列中, yml需要配置 publisher-returns: true
spring.rabbitmq.publisher-returns: true
# 开启发送消息的mandatory委托 可以接收return回调
spring.rabbitmq.template.mandatory: true

# 设置消费端手动 ack
spring.rabbitmq.listener.direct.acknowledge-mode: manual
spring.rabbitmq.listener.simple.acknowledge-mode: manual

# 消费者最小数量(即如果不够那一个消费端将充当多个消费者）
spring.rabbitmq.listener.simple.concurrency: 1
# 消费之最大数量
spring.rabbitmq.listener.simple.max-concurrency: 10
# 在单个请求中处理的消息个数，（basicQos限流在springboot中不再生效）
# 单个消费者限流的数=(concurrency*prefetch)/消费者端总数 因为有最小消费者数量
spring.rabbitmq.listener.simple.prefetch: 1


server:
  port: 8087
# freemarker静态资源配置
spring.freemarker.template-loader-path: classpath:/templates
spring.freemarker.cache: false
spring.freemarker.charset: UTF-8
spring.freemarker.check-template-location: true
spring.freemarker.content-type: text/html
spring.freemarker.expose-request-attributes: true
spring.freemarker.expose-session-attributes: true
spring.freemarker.expose-spring-macro-helpers: true
spring.freemarker.request-context-attribute: request
spring.freemarker.settings.template_update_delay: 0
spring.freemarker.suffix: .ftl
